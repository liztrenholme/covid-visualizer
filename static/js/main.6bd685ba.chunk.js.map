{"version":3,"sources":["lib/sdk/index.js","components/network/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["getData","country","a","url","data","fetch","then","blob","json","console","log","Network","options","layout","hierarchical","improvedLayout","props","ohioMode","edges","color","interaction","hoverEdges","navigationButtons","height","nodes","physics","nextProps","nextState","length","this","graph","className","events","style","vis","Component","Main","state","stateMode","nationalMode","selectedState","availableStates","anchored","updating","animationEnabled","clearViz","e","setState","currentTarget","value","chooseState","selectNode","id","push","updateVis","dragStart","event","updated","filter","node","dragEnd","pointer","temp","x","canvas","y","doubleClick","animationOn","barnesHut","gravitationalConstant","springLength","springConstant","damping","minVelocity","toggleAnimation","toggleMode","statusCode","covid19Stats","forEach","i","province","stateStats","stateNodes","map","city","label","confirmed","shape","shadow","scaling","min","max","enabled","hidden","fixed","includes","Math","ceil","j","concat","stateEdges","from","to","totalCases","totalDeaths","deaths","states","Set","sort","statesArray","allNodes","keyId","selectable","allEdges","dateUpdated","lastChecked","split","onClick","onChange","key","fontWeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6bd685ba.chunk.js","sourcesContent":["import 'whatwg-fetch';\n\nexport const getData = async (country) => {\n  const url = `https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats?country=${country}`;\n\n  let data = {};\n  try {\n    data = await fetch(url, {\n      'method': 'GET',\n      'headers': {\n        'Content-Type': 'application/json',\n        'x-rapidapi-host': 'covid-19-coronavirus-statistics.p.rapidapi.com',\n        'x-rapidapi-key': 'ca93407b12msh6207f84fb92a18ep1d6b56jsn4ab719b2e4d0'\n      }\n    })\n      .then(blob => blob.json());\n\n    return(data);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e, 'Error fetching data');\n    return(e);\n  }\n};","import React, { Component } from 'react';\nimport PropTypes, { bool, object } from 'prop-types';\nimport Graph from 'vis-react';\nimport './network.css';\nimport style from 'vis-network/styles/vis-network.css';\n \nclass Network extends Component {\n  // eslint-disable-next-line no-unused-vars\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.nodes.length !== this.props.nodes.length;\n  }\n\n  options = {\n    layout: {\n      hierarchical: false,\n      improvedLayout: this.props.ohioMode\n    },\n    edges: {\n      color: '#000000'\n    },\n    interaction: { \n      hoverEdges: true,\n      navigationButtons: true\n    },\n    height: '800px',\n    nodes: {\n      color: 'skyblue'\n    },\n    // configure: true,\n    physics: this.props.physics\n  };\n  \n  render() {\n    const { nodes, edges } = this.props;\n    const graph = {\n      nodes: nodes, edges: edges\n    };\n    return (\n      <div className=\"network\">\n        <Graph\n          graph={graph}\n          options={this.options}\n          events={this.props.events}\n          style={style}\n          //   getNetwork={this.getNetwork}\n          //   getEdges={this.getEdges}\n          //   getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n      </div>\n    );\n  }\n}\n\nNetwork.propTypes = {\n  data: PropTypes.object,\n  nodes: PropTypes.array,\n  edges: PropTypes.array,\n  ohioMode: PropTypes.bool,\n  selectNode: PropTypes.func,\n  events: PropTypes.object,\n  physics: PropTypes.oneOfType([object, bool])\n};\nexport default Network;","import React, { Component } from 'react';\nimport {getData} from '../../lib/sdk';\nimport './main.css';\nimport Network from '../network';\n\nclass Main extends Component {\n  state = {\n    data: {},\n    stateMode: true,\n    nationalMode: false,\n    selectedState: 'Ohio',\n    availableStates: [],\n    anchored: [],\n    updating: false,\n    animationEnabled: true\n  };\n\n  async componentDidMount() {\n    const data = await getData('USA');\n    if (data && data.statusCode === 200) {\n      const availableStates = [];\n      data.data.covid19Stats.forEach(i => availableStates.push(i.province));\n      this.setState({data: data.data, availableStates});\n    }\n  }\n  clearViz = (e) => this.setState({stateMode: false, nationalMode: false, selectedState: e.currentTarget.value}, () => {\n    this.chooseState();\n  });\n  chooseState = () => {\n    this.setState({stateMode: true});\n  }\n\n  selectNode = (id) => () => {\n    const {anchored} = this.state;\n    anchored.push(id);\n    // this.setState({anchored});\n  }\n\n  updateVis = () => this.setState({updating: true})\n\n  events = {\n    // select: (event) => {\n    //   var { nodes, edges } = event;\n    // },\n    dragStart: (event) => {\n      var { nodes } = event;\n      const temp = this.state.anchored;\n      const updated = temp.filter(node => node.id !== nodes[0]);\n      this.setState({anchored: updated});\n    },\n    dragEnd: (event) => {\n      var { nodes, edges, pointer } = event;\n      const temp = this.state.anchored;\n      if (nodes.length === 1 && edges.length > 1) {\n        return;\n      }\n      temp.push({id: nodes[0], x: pointer.canvas.x, y: pointer.canvas.y});\n      this.updateVis();\n      this.setState({anchored: temp, updating: false});\n    },\n    doubleClick: (event) => {\n      var { nodes } = event;\n      const temp = this.state.anchored;\n      const updated = temp.filter(node => node.id !== nodes[0]);\n      this.updateVis();\n      this.setState({anchored: updated, updating: false});\n    }\n  };\n\n\n  animationOn = {\n    barnesHut: {\n      gravitationalConstant: -12000,\n      // centralGravity: 0.9,\n      springLength: 95,\n      springConstant: 0.04,\n      damping: 1,\n      // avoidOverlap: 0.04\n    },\n    minVelocity: 0.07\n  }\n  toggleAnimation = () => this.state.animationEnabled \n    ? this.setState({animationEnabled: false}) : this.setState({animationEnabled: true})\n\n  toggleMode = () => this.state.stateMode \n    ? this.setState({stateMode: false, nationalMode: true})\n    : this.setState({stateMode: true, nationalMode: false});\n  render() {\n    const { data, nationalMode, stateMode, selectedState, anchored, updating, animationEnabled } = this.state;\n    const stateStats = data && data.covid19Stats && data.covid19Stats.length \n      ? data.covid19Stats.filter(i => i.province === selectedState) : [];\n    const stateNodes = stateStats.length \n      ? stateStats.map(i => {\n        return({ \n          id: `${i.city} ${i.province}`, \n          label: `${i.city || ''} ${i.confirmed}`, \n          shape: 'circle',\n          shadow: true,\n          scaling: {min: 0, max: 100, label: {enabled: true}},\n          value: i.confirmed,\n          hidden: i.city === 'Unassigned' && i.confirmed === 0,\n          fixed: anchored.map(i => i.id).includes(`${i.city} ${i.province}`) ? \n            {x: true, y: true} \n            : {x: false, y: false},\n          selectNode: this.selectNode(i.id),\n          x: anchored.map(i => i.id).includes(`${i.city} ${i.province}`) ? \n            Math.ceil(anchored.filter(j => j.id === `${i.city} ${i.province}`)[0].x)\n            : 0,\n          y: anchored.map(i => i.id).includes(`${i.city} ${i.province}`) ? \n            Math.ceil(anchored.filter(j => j.id === `${i.city} ${i.province}`)[0].y)\n            : 0,\n          color: i.confirmed > 5000 ? '#964eba' \n            : i.confirmed > 1000 ? '#ba4e66'\n              : i.confirmed > 500 ? '#f00' \n                : i.confirmed > 100 ? 'orange' \n                  : i.confirmed > 50 ? '#FFFF00' \n                    : i.confirmed === 0 ? '#fff' \n                      : '#fcfbd9' });}).concat([{id: selectedState, label: selectedState}]) : [];\n    const stateEdges = stateStats.length ? stateStats.map(i => {return({ from: i.province, to: `${i.city} ${i.province}`, hidden: i.city === 'Unassigned' && i.confirmed === 0, });}) : [];\n    let totalCases = 0;\n    let totalDeaths = 0;\n    stateStats.forEach(i => totalCases = totalCases + i.confirmed);\n    stateStats.forEach(i => totalDeaths = totalDeaths + i.deaths);\n    const states = data && data.covid19Stats && data.covid19Stats.length \n      ? [...new Set(data.covid19Stats.map(i => {return(i.province);}))] : [];\n    states.sort();\n    const statesArray = states.map(i => {return({id: i, label: i});});\n    const allNodes = data && data.covid19Stats && data.covid19Stats.length \n      ? data.covid19Stats.map(i => {return({ \n        id: `${i.keyId} ${i.province}`, \n        label: `${i.city || ''} ${i.confirmed}`, \n        shape: 'circle',\n        shadow: true,\n        scaling: {min: 0, max: 100, label: {enabled: true}},\n        value: i.confirmed,\n        hidden: i.city === 'Unassigned' && i.confirmed === 0,\n        selectable: true,\n        color: i.confirmed > 5000 ? '#964eba' \n          : i.confirmed > 1000 ? '#ba4e66' \n            : i.confirmed > 500 ? '#f00' \n              : i.confirmed > 100 ? 'orange' \n                : i.confirmed > 50 ? '#FFFF00' \n                  : i.confirmed === 0 ? '#fff' \n                    : '#fcfbd9' });}).concat(statesArray) : [];\n    const allEdges = data && data.covid19Stats && data.covid19Stats.length \n      ? data.covid19Stats.map(i => {return({ from: i.province, to: `${i.keyId} ${i.province}` });}) : [];\n    const dateUpdated = data && data.lastChecked \n      ? `${data.lastChecked.split('T')[0]}, ${data.lastChecked.split('T')[1].split('.')[0]}` : <div className='lds-hourglass' />;\n    return (\n      <div className=\"main\">\n        <h1>Covid-19 Confirmed Cases By County</h1><span>Last updated: {dateUpdated}</span>\n        <div className='button-container'>\n          <div className={stateMode ? 'active-button button' : 'inactive-button button'}\n            onClick={this.toggleMode}>\n          State Mode\n          </div>\n          {states && states.length ?\n            <select className='inactive-button' onChange={this.clearViz} value={selectedState}>\n              {states && states.length ? states.map(i => {\n                return(\n                  <option \n                    key={i} \n                    label={i}\n                    value={i}>{i}</option>\n                );}) : null}\n            </select> : null}\n          <div className={nationalMode ? 'active-button button' : 'inactive-button button'}\n            onClick={this.toggleMode}>\n                All States\n          </div>\n          {!nationalMode && stateMode ?\n            <div className={animationEnabled ? 'active-button button' : 'inactive-button button'}\n              onClick={this.toggleAnimation}>\n              Animation {animationEnabled ? 'On' : 'Off'}\n            </div> : null}\n        </div>\n        <div className=\"main-layout\">\n          <div className=\"counties-container\">\n            <h2>{selectedState} Counties</h2>\n            <h4>Confirmed Cases</h4>\n            Total: {totalCases || 'Not available'}\n            <br />\n            Deaths: {totalDeaths || 'Not available'}\n            <ul className=\"county-list\">\n              {stateStats.length ? \n                stateStats.map(i => {return(<li key={i.city}>\n                  <p className=\"counties\" style={{color: i.confirmed > 5000 ? '#964eba' \n                    : i.confirmed > 1000 ? '#ba4e66'\n                      : i.confirmed > 500 ? '#f00' \n                        : i.confirmed > 100 ? '#bd7115' \n                          : i.confirmed > 50 ? '#ada61f' : '#000', fontWeight: 'bold'}}>\n                    {i.city || i.province}: {i.confirmed}\n                  </p>\n                </li>);\n                }) : null}\n            </ul>\n          </div>\n          <div className=\"visualizer\">\n            {data && data.covid19Stats && data.covid19Stats.length\n            && stateMode && !nationalMode && !updating\n              ? <Network \n                data={data}\n                nodes={stateNodes}\n                edges={stateEdges}\n                ohioMode={stateMode}\n                selectNode={this.selectNode}\n                events={this.events}\n                physics={animationEnabled ? this.animationOn : true} /> : null}\n            {data && data.covid19Stats && data.covid19Stats.length\n            && nationalMode && !stateMode && !updating\n              ? <Network \n                data={data}\n                nodes={allNodes}\n                edges={allEdges}\n                ohioMode={stateMode}\n                selectNode={this.selectNode}\n                physics={this.animationEnabled} /> : null}\n          </div>\n          {/* <div className=\"graph-3d\">\n          graph 3d\n        </div> */}\n        </div>\n        <footer>Data source: Johns Hopkins University via RapidAPI</footer>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}