{"version":3,"sources":["lib/sdk/index.js","components/network/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["getData","country","a","url","data","fetch","then","blob","json","console","log","Network","options","layout","hierarchical","improvedLayout","props","ohioMode","edges","color","interaction","hoverEdges","height","nodes","nextProps","nextState","this","graph","className","style","vis","Component","Main","state","stateMode","nationalMode","selectedState","availableStates","clearViz","e","setState","currentTarget","value","chooseState","toggleMode","statusCode","covid19Stats","forEach","i","push","province","stateStats","length","filter","stateNodes","map","id","city","label","confirmed","shape","concat","stateEdges","from","to","states","Set","sort","statesArray","allNodes","keyId","allEdges","dateUpdated","lastChecked","split","onClick","onChange","key","fontWeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc809c09.chunk.js","sourcesContent":["import 'whatwg-fetch';\n\nexport const getData = async (country) => {\n  const url = `https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats?country=${country}`;\n\n  let data = {};\n  try {\n    data = await fetch(url, {\n      'method': 'GET',\n      'headers': {\n        'Content-Type': 'application/json',\n        'x-rapidapi-host': 'covid-19-coronavirus-statistics.p.rapidapi.com',\n        'x-rapidapi-key': 'ca93407b12msh6207f84fb92a18ep1d6b56jsn4ab719b2e4d0'\n      }\n    })\n      .then(blob => blob.json());\n\n    return(data);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e, 'Error fetching data');\n    return(e);\n  }\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from 'vis-react';\nimport './network.css';\nimport style from 'vis-network/styles/vis-network.css';\n \n\n \n// var events = {\n//   select: function(event) {\n//     var { nodes, edges } = event;\n//   }\n// };\n\nclass Network extends Component {\n  // eslint-disable-next-line no-unused-vars\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.nodes !== this.props.nodes;\n  }\n\n  options = {\n    layout: {\n      hierarchical: false,\n      improvedLayout: this.props.ohioMode\n    },\n    edges: {\n      color: '#000000'\n    },\n    interaction: { hoverEdges: true },\n    height: '800px',\n    nodes: {\n      color: 'skyblue'\n    },\n  };\n  \n  render() {\n    const { nodes, edges } = this.props;\n    const graph = {\n      nodes: nodes, edges: edges\n    };\n    return (\n      <div className=\"network\">\n        <Graph\n          graph={graph}\n          options={this.options}\n          // events={events}\n          style={style}\n          //   getNetwork={this.getNetwork}\n          //   getEdges={this.getEdges}\n          //   getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n      </div>\n    );\n  }\n}\n\nNetwork.propTypes = {\n  data: PropTypes.object,\n  nodes: PropTypes.array,\n  edges: PropTypes.array,\n  ohioMode: PropTypes.bool\n};\nexport default Network;","import React, { Component } from 'react';\nimport {getData} from '../../lib/sdk';\nimport './main.css';\nimport Network from '../network';\n\nclass Main extends Component {\n  state = {\n    data: {},\n    stateMode: true,\n    nationalMode: false,\n    selectedState: 'Ohio',\n    availableStates: []\n  };\n\n  async componentDidMount() {\n    const data = await getData('USA');\n    if (data && data.statusCode === 200) {\n      const availableStates = [];\n      data.data.covid19Stats.forEach(i => availableStates.push(i.province));\n      this.setState({data: data.data, availableStates});\n    }\n  }\n  clearViz = (e) => this.setState({stateMode: false, nationalMode: false, selectedState: e.currentTarget.value}, () => {\n    this.chooseState();\n  });\n  chooseState = () => {\n    this.setState({stateMode: true});\n  }\n  toggleMode = () => this.state.stateMode \n    ? this.setState({stateMode: false, nationalMode: true}) \n    : this.setState({stateMode: true, nationalMode: false});\n  render() {\n    const { data, nationalMode, stateMode, selectedState } = this.state;\n    const stateStats = data && data.covid19Stats && data.covid19Stats.length \n      ? data.covid19Stats.filter(i => i.province === selectedState) : [];\n    const stateNodes = stateStats.length \n      ? stateStats.map(i => {return({ \n        id: `${i.city} city`, \n        label: `${i.city} ${i.confirmed}`, \n        shape: 'circle',\n        color: i.confirmed > 5000 ? '#964eba' \n          : i.confirmed > 1000 ? '#ba4e66'\n            : i.confirmed > 500 ? '#f00' \n              : i.confirmed > 100 ? 'orange' \n                : i.confirmed > 50 ? '#FFFF00' \n                  : i.confirmed === 0 ? '#fff' \n                    : '#fcfbd9' });}).concat([{id: selectedState, label: selectedState}]) : []; //[{id: selectedState, label: selectedState}];\n    const stateEdges = stateStats.length ? stateStats.map(i => {return({ from: i.province, to: `${i.city} city` });}) : [];\n\n    const states = data && data.covid19Stats && data.covid19Stats.length \n      ? [...new Set(data.covid19Stats.map(i => {return(i.province);}))] : [];\n    states.sort();\n    const statesArray = states.map(i => {return({id: i, label: i});});\n    const allNodes = data && data.covid19Stats && data.covid19Stats.length \n      ? data.covid19Stats.map(i => {return({ \n        id: `${i.keyId} city`, \n        label: `${i.city} ${i.confirmed}`, \n        shape: 'circle', \n        color: i.confirmed > 5000 ? '#964eba' \n          : i.confirmed > 1000 ? '#ba4e66' \n            : i.confirmed > 500 ? '#f00' \n              : i.confirmed > 100 ? 'orange' \n                : i.confirmed > 50 ? '#FFFF00' \n                  : i.confirmed === 0 ? '#fff' \n                    : '#fcfbd9' });}).concat(statesArray) : []; // [{id: 'Ohio', label: 'Ohio'}];\n    const allEdges = data && data.covid19Stats && data.covid19Stats.length \n      ? data.covid19Stats.map(i => {return({ from: i.province, to: `${i.keyId} city` });}) : [];\n    const dateUpdated = data && data.lastChecked \n      ? `${data.lastChecked.split('T')[0]}, ${data.lastChecked.split('T')[1].split('.')[0]}` : 'fetching...';\n    return (\n      <div className=\"main\">\n        <h1>Covid-19 Confirmed Cases By County</h1><span>Updated: {dateUpdated}</span>\n        <div className='button-container'>\n          <div className={stateMode ? 'active-button button' : 'inactive-button button'}\n            onClick={this.toggleMode}>\n          State Mode\n          </div>\n          {states && states.length ?\n            <select className='inactive-button' onChange={this.clearViz} value={selectedState}>\n              {states && states.length ? states.map(i => {\n                return(\n                  <option \n                    key={i} \n                    label={i}\n                    value={i}>{i}</option>\n                );}) : null}\n            </select> : null}\n          <div className={nationalMode ? 'active-button button' : 'inactive-button button'}\n            onClick={this.toggleMode}>\n                All States\n          </div>\n        </div>\n        <div className=\"main-layout\">\n          <div className=\"counties-container\">\n            <h2>{selectedState} Counties</h2>\n            <h4>Confirmed Cases</h4>\n            <ul className=\"county-list\">\n              {stateStats.length ? \n                stateStats.map(i => {return(<li key={i.city}>\n                  <p className=\"counties\" style={i.confirmed > 50 ? {color: 'red', fontWeight: 'bold'} : {}}>\n                    {i.city || i.province}: {i.confirmed}\n                  </p>\n                </li>);}) : null}\n            </ul>\n          </div>\n          <div className=\"visualizer\">\n            {data && data.covid19Stats && data.covid19Stats.length\n            && stateMode && !nationalMode\n              ? <Network \n                data={data}\n                nodes={stateNodes}\n                edges={stateEdges}\n                ohioMode={stateMode} /> : null}\n            {data && data.covid19Stats && data.covid19Stats.length\n            && nationalMode && !stateMode\n              ? <Network \n                data={data}\n                nodes={allNodes}\n                edges={allEdges}\n                ohioMode={stateMode} /> : null}\n          </div>\n          {/* <div className=\"graph-3d\">\n          graph 3d\n        </div> */}\n        </div>\n        <footer>Data source: Johns Hopkins University via RapidAPI</footer>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}