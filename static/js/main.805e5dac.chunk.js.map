{"version":3,"sources":["lib/sdk/index.js","components/network/index.js","components/main/index.js","App.js","serviceWorker.js","index.js"],"names":["getData","country","a","url","data","fetch","then","blob","json","console","log","events","select","event","nodes","edges","Network","options","layout","hierarchical","improvedLayout","props","ohioMode","color","interaction","hoverEdges","height","nextProps","nextState","id","this","graph","className","style","vis","Component","Main","state","toggleMode","setState","statusCode","ohioStats","covid19Stats","length","filter","i","province","ohioNodes","map","city","label","confirmed","concat","ohioEdges","from","to","statesArray","Set","allNodes","keyId","allEdges","lastChecked","onClick","key","fontWeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.805e5dac.chunk.js","sourcesContent":["import 'whatwg-fetch';\n\nexport const getData = async (country) => {\n  const url = `https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats?country=${country}`;\n\n  let data = {};\n  try {\n    data = await fetch(url, {\n      'method': 'GET',\n      'headers': {\n        'Content-Type': 'application/json',\n        'x-rapidapi-host': 'covid-19-coronavirus-statistics.p.rapidapi.com',\n        'x-rapidapi-key': 'ca93407b12msh6207f84fb92a18ep1d6b56jsn4ab719b2e4d0'\n      }\n    })\n      .then(blob => blob.json());\n\n    return(data);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(e, 'Error fetching data');\n    return(e);\n  }\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Graph from 'vis-react';\nimport './network.css';\nimport style from 'vis-network/styles/vis-network.css';\n \n\n \nvar events = {\n  select: function(event) {\n    var { nodes, edges } = event;\n  }\n};\n\nclass Network extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextProps.nodes[0].id, this.props.nodes[0].id);\n    return nextProps.nodes !== this.props.nodes;\n  }\n\n  options = {\n    layout: {\n      hierarchical: false,\n      improvedLayout: this.props.ohioMode\n    },\n    edges: {\n      color: '#000000'\n    },\n    interaction: { hoverEdges: true },\n    height: '800px',\n    nodes: {\n      color: 'skyblue'\n    },\n  };\n  \n  render() {\n    const { data, nodes, edges } = this.props;\n    // console.log(edges);\n    const graph = {\n      nodes: nodes, edges: edges\n    };\n    return (\n      <div className=\"network\">\n        <Graph\n          graph={graph}\n          options={this.options}\n          events={events}\n          style={style}\n          //   getNetwork={this.getNetwork}\n          //   getEdges={this.getEdges}\n          //   getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n      </div>\n    );\n  }\n}\n\nNetwork.propTypes = {\n  data: PropTypes.object,\n  nodes: PropTypes.array,\n  edges: PropTypes.array,\n  ohioMode: PropTypes.bool\n};\nexport default Network;","import React, { Component } from 'react';\nimport {getData} from '../../lib/sdk';\nimport './main.css';\nimport Network from '../network';\n\nclass Main extends Component {\n  state = {\n    data: {},\n    ohioMode: true\n  };\n\n  async componentDidMount() {\n    const data = await getData('USA');\n    if (data && data.statusCode === 200) {\n      this.setState({data: data.data});\n    }\n  }\n  toggleMode = () => this.state.ohioMode ? this.setState({ohioMode: false}) : this.setState({ohioMode: true});\n  render() {\n    const { data, ohioMode } = this.state;\n    const ohioStats = data && data.covid19Stats && data.covid19Stats.length ? data.covid19Stats.filter(i => i.province === 'Ohio') : [];\n    const ohioNodes = ohioStats.length ? ohioStats.map(i => {return({ id: i.city, label: `${i.city} ${i.confirmed}` });}).concat([{id: 'Ohio', label: 'Ohio'}]) : [{id: 'Ohio', label: 'Ohio'}];\n    const ohioEdges = ohioStats.length ? ohioStats.map(i => {return({ from: i.province, to: i.city });}) : [];\n\n    const states = data && data.covid19Stats && data.covid19Stats.length ? [...new Set(data.covid19Stats.map(i => {return(i.province);}))] : [];\n    const statesArray = states.map(i => {return({id: i, label: i});});\n    const allNodes = data && data.covid19Stats && data.covid19Stats.length ? data.covid19Stats.map(i => {return({ id: i.keyId, label: `${i.city} ${i.confirmed}` });}).concat(statesArray) : [{id: 'Ohio', label: 'Ohio'}];\n    const allEdges = data && data.covid19Stats && data.covid19Stats.length ? data.covid19Stats.map(i => {return({ from: i.province, to: i.keyId });}) : [];\n    return (\n      <div className=\"main\">\n        <h1>Covid-19 Stats By County</h1><span>Updated: {data.lastChecked}</span>\n        <div className={ohioMode ? 'active-button button' : 'inactive-button button'}\n          onClick={this.toggleMode}>\n                Ohio\n        </div>\n        <div className={ohioMode ? 'inactive-button button' : 'active-button button'}\n          onClick={this.toggleMode}>\n                All States\n        </div>\n        <div className=\"main-layout\">\n          <div className=\"counties-container\">\n            <h2>Ohio Counties</h2>\n            <ul className=\"county-list\">\n              {ohioStats.length ? \n                ohioStats.map(i => {return(<li key={i.city}>\n                  <p className=\"counties\" style={i.confirmed > 50 ? {color: 'red', fontWeight: 'bold'} : {}}>\n                    {i.city}: {i.confirmed}\n                  </p>\n                </li>);}) : null}\n            </ul>\n          </div>\n          <div className=\"visualizer\">\n            {data && data.covid19Stats && data.covid19Stats.length\n            && ohioMode\n              ? <Network \n                data={data}\n                nodes={ohioNodes}\n                edges={ohioEdges}\n                ohioMode={ohioMode} /> : null}\n            {data && data.covid19Stats && data.covid19Stats.length\n            && !ohioMode\n              ? <Network \n                data={data}\n                nodes={allNodes}\n                edges={allEdges}\n                ohioMode={ohioMode} /> : null}\n          </div>\n          {/* <div className=\"graph-3d\">\n          graph 3d\n        </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}